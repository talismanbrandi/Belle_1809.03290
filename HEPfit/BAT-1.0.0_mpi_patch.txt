diff -Naur BAT-1.0.0/BAT/BCEngineMCMC.h BAT-1.0.0_OMPI/BAT/BCEngineMCMC.h
--- BAT-1.0.0/BAT/BCEngineMCMC.h	2018-05-18 22:42:00.000000000 +0200
+++ BAT-1.0.0_OMPI/BAT/BCEngineMCMC.h	2019-04-17 04:06:08.000000000 +0200
@@ -1321,26 +1321,28 @@
      * @return Whether proposed point was accepted (true) or previous point was kept (false). */
     bool GetNewPointMetropolis();
 
+    /* Begin MPI MOD */
     /**
      * Generate a new point using the Metropolis algorithm for one chain.
      * @param chain chain index
      * @return Whether proposed point was accepted (true) or previous point was kept (false). */
-    bool GetNewPointMetropolis(unsigned chain);
+    bool GetChosenNewPointMetropolis();
 
     /**
      * Generate a new point using the Metropolis algorithm for one chain, varying only one parameter's value.
      * @param chain Chain index
      * @param parameter Index of single parameter to update.
      * @return Whether proposed point was accepted (true) or previous point was kept (false). */
-    bool GetNewPointMetropolis(unsigned chain, unsigned parameter);
+    bool GetChosenNewPointMetropolis(unsigned parameter);
 
     /**
      * Accept or rejects a point for a chain and updates efficiency.
      * @param chain chain index
      * @param parameter index of parameter to update efficiency for
      * @return Whether proposed point was accepted (true) or previous point was kept (false). */
-    bool AcceptOrRejectPoint(unsigned chain, unsigned parameter);
-
+    bool AcceptOrRejectPoint(unsigned parameter);
+    /* End MPI MOD */
+    
     /**
      * Fill marginalized distributions from a chain state*/
     void InChainFillHistograms(const ChainState& cs);
@@ -1362,6 +1364,14 @@
      * @param parameters Parameter set to evaluate at.
      * @return natural logarithm of the function to map with MCMC */
     virtual double LogEval(const std::vector<double>& parameters) = 0;
+    
+    /* Begin MPI MOD */
+    /**
+     * Needs to be overloaded in the derived class.
+     * @param parameters Parameter set to evaluate at.
+     * @return natural logarithm of the APrioriProbability. */
+    virtual double LogAPrioriProbability(const std::vector<double>& parameters) = 0;
+    /* End MPI MOD */
 
     /**
      * Runs Metropolis algorithm.
@@ -1525,6 +1535,9 @@
     void UpdateChainIndex(int chain);
 
     /** @} */
+    /* Begin MPI MOD */
+    int procnum;
+    /* End MPI MOD */
 
 private:
 
diff -Naur BAT-1.0.0/src/BCEngineMCMC.cxx BAT-1.0.0_OMPI/src/BCEngineMCMC.cxx
--- BAT-1.0.0/src/BCEngineMCMC.cxx	2018-05-18 22:42:00.000000000 +0200
+++ BAT-1.0.0_OMPI/src/BCEngineMCMC.cxx	2019-04-17 04:06:18.000000000 +0200
@@ -51,6 +51,10 @@
 #include <omp.h>
 #endif
 
+/* Begin MPI MOD */
+#include <mpi.h>
+/* End MPI MOD */
+
 // ---------------------------------------------------------
 BCEngineMCMC::BCEngineMCMC(const std::string& name)
     : fMCMCNIterationsConvergenceGlobal(-1),
@@ -84,6 +88,9 @@
     SetName(name);
     SetPrecision(BCEngineMCMC::kMedium);
     SetRandomSeed(0);
+    /* Begin MPI MOD */
+    MPI_Comm_size(MPI_COMM_WORLD, &procnum);
+    /* End MPI MOD */
 }
 
 // ---------------------------------------------------------
@@ -120,6 +127,9 @@
     SetPrecision(BCEngineMCMC::kMedium);
     SetRandomSeed(0);
     LoadMCMC(filename, "", "", loadObservables);
+    /* Begin MPI MOD */
+    MPI_Comm_size(MPI_COMM_WORLD, &procnum);
+    /* End MPI MOD */
 }
 
 // ---------------------------------------------------------
@@ -186,6 +196,9 @@
     SetNChains(other.fMCMCNChains);
 
     CloneMarginals(other);
+    /* Begin MPI MOD */
+    MPI_Comm_size(MPI_COMM_WORLD, &procnum);
+    /* End MPI MOD */
 }
 
 BCEngineMCMC& BCEngineMCMC::operator=(const BCEngineMCMC& other)
@@ -236,7 +249,7 @@
         fInitialPositionAttemptLimit = other.fInitialPositionAttemptLimit;
         fMCMCProposeMultivariate = other.fMCMCProposeMultivariate;
         fMCMCPhase = other.fMCMCPhase;
-        fMCMCStates = fMCMCStates;
+        fMCMCStates = other.fMCMCStates;
         fMCMCStatistics = other.fMCMCStatistics;
         fMCMCStatistics_AllChains = other.fMCMCStatistics_AllChains;
         fCorrectRValueForSamplingVariability = other.fCorrectRValueForSamplingVariability;
@@ -256,6 +269,9 @@
         // don't create file!
 
         CloneMarginals(other);
+        /* Begin MPI MOD */
+        procnum = other.procnum;
+        /* End MPI MOD */
     } catch (...) {
         // leave object in sane state but otherwise don't know what to do with exception
         DeleteMarginals();
@@ -1576,73 +1592,129 @@
     return GetParameter(ipar).IsWithinLimits(x[ipar]);
 }
 
+/* Begin MPI MOD */
 // --------------------------------------------------------
-bool BCEngineMCMC::AcceptOrRejectPoint(unsigned chain, unsigned parameter)
+bool BCEngineMCMC::AcceptOrRejectPoint(unsigned parameter)
 {
-    // retrieve current probability
-    double p0 = fMCMCStates[chain].log_probability;
-    if (!std::isfinite(p0)) p0 = -std::numeric_limits<double>::max();
-    // calculate proposed probability
-    const double p1 = LogEval(fMCMCThreadLocalStorage[chain].parameters);
-
-    // if the new point is more probable, keep it; or else throw dice
-    if (std::isfinite(p1) && (p1 >= p0 || log(fMCMCThreadLocalStorage[chain].rng->Rndm()) < (p1 - p0))) {
-        // accept point
-        fMCMCStates[chain] = fMCMCThreadLocalStorage[chain];
-        // increase efficiency
-        fMCMCStatistics[chain].efficiency[parameter] += (1. - fMCMCStatistics[chain].efficiency[parameter]) / (fMCMCStatistics[chain].n_samples_efficiency + 1.);
-        // execute user code and return
-        MCMCCurrentPointInterface(fMCMCStates[chain].parameters, chain, true);
-        return true;
-    }
-
-    // else decrease efficiency
-    fMCMCStatistics[chain].efficiency[parameter] *= 1.*fMCMCStatistics[chain].n_samples_efficiency / (fMCMCStatistics[chain].n_samples_efficiency + 1.);
-
-    // if log(likelihood) of proposed point was not a finite number
-    if (!std::isfinite(p1)) {
-        if (fMCMCProposeMultivariate) {
-            BCLog::OutDebug(Form("log(probability) evaluated to nan or inf in chain %i while at ", chain));
-            PrintParameters(fMCMCThreadLocalStorage[chain].parameters, BCLog::OutDebug);
-        } else
-            BCLog::OutDebug(Form("log(probability) evaluated to nan or inf in chain %i while varying parameter %s to %.3e", chain, GetParameter(parameter).GetName().data(), fMCMCThreadLocalStorage[chain].parameters[parameter]));
-    }
-
-    // execute user code and return
-    MCMCCurrentPointInterface(fMCMCThreadLocalStorage[chain].parameters, chain, false);
-    return false;
+    bool return_value = true;
+    unsigned mychain = 0;
+    int iproc = 0;
+    unsigned npars = fParameters.Size();
+    int buffsize = npars + 1;
+    double p0[procnum];
+    int index_chain[procnum];    
+    std::vector<double> pars;
+
+    //------------------
+    double *recvbuff = new double[buffsize];
+    double **buff;
+    buff = new double*[procnum];
+    buff[0]=new double[procnum];
+    for(int i = 1; i < procnum; i++) buff[i]=buff[i - 1] + 1;
+    double ** sendbuff = new double *[procnum];
+    sendbuff[0] = new double[procnum * buffsize];
+    for (int il = 1; il < procnum; il++) sendbuff[il] = sendbuff[il - 1] + buffsize;
+    //------------------
+    
+    double ll;
+    bool last = false;
+    bool valid = false;
+    
+    while (mychain < fMCMCNChains) {
+        bool accept = false;
+        // increase counter
+        UpdateChainIndex(mychain);
+        ++fMCMCStates[mychain].iteration;
+        
+        // get proposal point (0 for multivariate proposal)
+        if (fMCMCProposeMultivariate) valid = GetProposalPointMetropolis(mychain, fMCMCThreadLocalStorage[mychain].parameters);
+        else valid = GetProposalPointMetropolis(mychain, parameter, fMCMCThreadLocalStorage[mychain].parameters);
+        
+        if (valid) {
+            if (!last) {
+                // retrieve current probability
+                p0[iproc] = fMCMCStates[mychain].log_probability;
+                if (!std::isfinite(p0[iproc])) p0[iproc] = -std::numeric_limits<double>::max();
+                index_chain[iproc] = mychain;
+                iproc++;
+                mychain++;
+                if (iproc < procnum && mychain < fMCMCNChains) continue;
+            } else if (iproc == 0) break;
+            for(int il = 0; il < iproc ; il++) {
+                //The first entry of the array specifies the task to be executed.
+                sendbuff[il][0] = 1.; // 1 = likelihood calculation
+                for (int im = 1; im < buffsize; im++) sendbuff[il][im] = fMCMCThreadLocalStorage[index_chain[il]].parameters.at(im-1);//fMCMCxvect[il][im-1];
+            }
+            for(int il = iproc ; il < procnum; il++) sendbuff[il][0] = 0.; // 0 = nothing to execute
+            
+            MPI_Scatter(sendbuff[0], buffsize, MPI_DOUBLE, recvbuff, buffsize, MPI_DOUBLE, 0, MPI_COMM_WORLD);
+            
+            if (recvbuff[0] == 1.) {
+                pars.assign(recvbuff + 1, recvbuff + buffsize);
+                ll = LogEval(pars);
+            } else ll = log(0.);
+            
+            MPI_Gather(&ll, 1, MPI_DOUBLE, buff[0], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
+
+            for (int j = 0; j < iproc; j++) {
+                // if the new point is more probable, keep it; or else throw dice
+                if (std::isfinite(*buff[j]) && (*buff[j] >= p0[j] || log(fMCMCThreadLocalStorage[index_chain[j]].rng->Rndm()) < (*buff[j] - p0[j]))) {
+                    // accept point
+                    // The next three lines are not in vanilla BAT. This update is done by LogEval (LogProbabilityNN in BCModel) but that does not work for MPI.
+                    fMCMCThreadLocalStorage[index_chain[j]].log_probability = *buff[j]; 
+                    fMCMCThreadLocalStorage[index_chain[j]].log_prior = LogAPrioriProbability(fMCMCThreadLocalStorage[index_chain[j]].parameters);
+                    fMCMCThreadLocalStorage[index_chain[j]].log_likelihood = fMCMCThreadLocalStorage[index_chain[j]].log_probability - fMCMCThreadLocalStorage[index_chain[j]].log_prior;
+                    // Copy everything into the States.
+                    fMCMCStates[index_chain[j]] = fMCMCThreadLocalStorage[index_chain[j]];
+                    // increase efficiency
+                    fMCMCStatistics[index_chain[j]].efficiency[parameter] += (1. - fMCMCStatistics[index_chain[j]].efficiency[parameter]) / (fMCMCStatistics[index_chain[j]].n_samples_efficiency + 1.);
+                    accept = true;
+                } else {
+                    // else decrease efficiency
+                    fMCMCStatistics[index_chain[j]].efficiency[parameter] *= 1.*fMCMCStatistics[index_chain[j]].n_samples_efficiency / (fMCMCStatistics[index_chain[j]].n_samples_efficiency + 1.);
+                    accept = false;
+                 // if log(likelihood) of proposed point was not a finite number
+                 /* if (!std::isfinite(*buff[j])) {
+                        if (fMCMCProposeMultivariate) {
+                            BCLog::OutDebug(Form("log(probability) evaluated to nan or inf in chain %i while at ", chain));
+                            PrintParameters(fMCMCThreadLocalStorage[index_chain[j]].parameters, BCLog::OutDebug);
+                        } else
+                            BCLog::OutDebug(Form("log(probability) evaluated to nan or inf in chain %i while varying parameter %s to %.3e", chain, GetParameter(parameter).GetName().data(), fMCMCThreadLocalStorage[index_chain[j]].parameters[parameter]));
+                    } HEPfit NOTE: Output suppressed since it is printed too often for flat weights. */
+                }
+            }
+            iproc = 0;
+        } else {
+            mychain++;
+            if (mychain < fMCMCNChains) continue;
+            else last = true;
+            accept = false;
+        }
+        return_value &= accept;
+        MCMCCurrentPointInterface(fMCMCThreadLocalStorage[mychain].parameters, mychain, accept);
+    }
+    
+    delete sendbuff[0];
+    delete [] sendbuff;
+    delete [] recvbuff;
+    delete buff[0];
+    delete [] buff;
+    
+    return return_value;
 }
 
 // --------------------------------------------------------
-bool BCEngineMCMC::GetNewPointMetropolis(unsigned chain, unsigned parameter)
-{
-    // increase counter
-    ++fMCMCStates[chain].iteration;
-
-    // get proposal point
-    if (GetProposalPointMetropolis(chain, parameter, fMCMCThreadLocalStorage[chain].parameters))
-        return AcceptOrRejectPoint(chain, parameter);
-
-    // execute user code and return
-    MCMCCurrentPointInterface(fMCMCThreadLocalStorage[chain].parameters, chain, false);
-    return false;
+bool BCEngineMCMC::GetChosenNewPointMetropolis(unsigned parameter)
+{        
+    return AcceptOrRejectPoint(parameter);
 }
 
 // --------------------------------------------------------
-bool BCEngineMCMC::GetNewPointMetropolis(unsigned chain)
-{
-    // increase counter
-    ++fMCMCStates[chain].iteration;
-
-    // get proposal point
-    if (GetProposalPointMetropolis(chain, fMCMCThreadLocalStorage[chain].parameters))
-        return AcceptOrRejectPoint(chain, 0);
-
-    // execute user code and return
-    MCMCCurrentPointInterface(fMCMCThreadLocalStorage[chain].parameters, chain, false);
-    return false;
+bool BCEngineMCMC::GetChosenNewPointMetropolis()
+{    
+    return AcceptOrRejectPoint(0);
 }
-
+/* End MPI MOD */
 //--------------------------------------------------------
 bool BCEngineMCMC::GetNewPointMetropolis()
 {
@@ -1654,24 +1726,18 @@
         for (unsigned ipar = 0; ipar < GetNParameters(); ++ipar) {
             if (GetParameter(ipar).Fixed())
                 continue;
-
-            //loop over chains
+            /* Begin MPI MOD */
             #pragma omp parallel for schedule(static)
-            for (unsigned c = 0; c < fMCMCNChains; ++c) {
-                UpdateChainIndex(c);
-                return_value &= GetNewPointMetropolis(c, ipar);
-            }
+            return_value &= GetChosenNewPointMetropolis(ipar);
+            /* End MPI MOD */
         }
 
     } else {
+        /* Begin MPI MOD */
         /* run over all pars at once */
-
-        //loop over chains
         #pragma omp parallel for schedule(static)
-        for (unsigned c = 0; c < fMCMCNChains; ++c) {
-            UpdateChainIndex(c);
-            return_value &= GetNewPointMetropolis(c);
-        }
+        return_value &= GetChosenNewPointMetropolis();
+        /* End MPI MOD */
     }
 
     // increase number of iterations used in each chain for calculating efficiencies
@@ -1679,7 +1745,7 @@
         fMCMCStatistics[c].n_samples_efficiency += 1;
 
     ++fMCMCCurrentIteration;
-    return return_value;
+    return return_value; // HEPfit note: return_value is unused anywhere in BCEngineMCMC
 }
 
 // --------------------------------------------------------
@@ -1767,7 +1833,7 @@
     // initialize Markov chain
     MCMCInitialize();
 
-    if (fMCMCFlagWritePreRunToFile)
+    if (!fMCMCOutputFile && fMCMCFlagWritePreRunToFile) // HEPfit Note: Modification required to access Root tree from HEPfit consistently.
         InitializeMarkovChainTree();
 
     // perform run
@@ -2201,7 +2267,7 @@
         for (unsigned c = 0; c < fMCMCStates.size(); ++c)
             fMCMCStates[c].iteration = 0;
     }
-    if (fMCMCFlagWriteChainToFile)
+    if (!fMCMCOutputFile && fMCMCFlagWriteChainToFile) // HEPfit Note: Modification required to access Root tree from HEPfit consistently.
         InitializeMarkovChainTree(false, false);
 
     // check that correct objects of correct size have been created
diff -Naur BAT-1.0.0/src/BCH2D.cxx BAT-1.0.0_OMPI/src/BCH2D.cxx
--- BAT-1.0.0/src/BCH2D.cxx	2018-05-18 22:42:00.000000000 +0200
+++ BAT-1.0.0_OMPI/src/BCH2D.cxx	2019-04-17 04:06:18.000000000 +0200
@@ -143,15 +143,39 @@
 
     // set contour levels
     GetHistogram()->SetContour(levels.size(), &levels[0]);
-
-    if (fBandFillStyle <= 0) {
+    
+    /* Begin MPI MOD */
+    // if (fBandFillStyle <= 0) {
+    //     GetHistogram()->SetLineColor(GetLineColor());
+    //     GetHistogram()->Draw(Form("%scont%d", options.data(), static_cast<int>(std::abs(fBandFillStyle))));
+    // } else {
+    //     gStyle->SetPalette(colors.size(), &colors[0]);
+    //     GetHistogram()->SetFillStyle(fBandFillStyle);
+    //     GetHistogram()->Draw((options + "cont").data());
+    // }
+    /* HEPfit Note: Custom band styles for HEPfit. */
+    if (fBandFillStyle < 0) {
         GetHistogram()->SetLineColor(GetLineColor());
-        GetHistogram()->Draw(Form("%scont%d", options.data(), static_cast<int>(std::abs(fBandFillStyle))));
-    } else {
+        GetHistogram()->Draw((options + "cont2").data());
+    } else if (fBandFillStyle == 1001) {
         gStyle->SetPalette(colors.size(), &colors[0]);
         GetHistogram()->SetFillStyle(fBandFillStyle);
-        GetHistogram()->Draw((options + "cont").data());
+        GetHistogram()->Draw((options + "col").data());
+    } else if (fBandFillStyle == 101) {
+        gStyle->SetPalette(colors.size(), &colors[0]);
+        // GetHistogram()->SetFillStyle(1001);
+        GetHistogram()->DrawClone("cont4");
+    } else if (fBandFillStyle == 1) {
+        gStyle->SetPalette(colors.size(), &colors[0]);
+        GetHistogram()->SetFillStyle(0);
+        GetHistogram()->Draw((options + "cont1").data());
+    } else {
+        gStyle->SetPalette(colors.size(), &colors[0]);
+        GetHistogram()->SetFillStyle(1001);
+        GetHistogram()->Draw((options + "cont0").data());
     }
+    /* End MPI MOD */
+    
     gPad->Update();
 
     // Set legend entries
diff -Naur BAT-1.0.0/src/BCHistogramBase.cxx BAT-1.0.0_OMPI/src/BCHistogramBase.cxx
--- BAT-1.0.0/src/BCHistogramBase.cxx	2018-05-18 22:42:00.000000000 +0200
+++ BAT-1.0.0_OMPI/src/BCHistogramBase.cxx	2019-04-17 04:06:18.000000000 +0200
@@ -201,7 +201,7 @@
         return;
     }
 
-    fHistogram = BCAux::OwnClone(hist, Form("%s_bch", hist->GetName()));
+    fHistogram = BCAux::OwnClone(hist, Form("%s", hist->GetName()));
     fHistogram->SetStats(false);
     fHistogram->SetDirectory(0);
     fDimension = fHistogram->GetDimension();
diff -Naur BAT-1.0.0/src/BCLog.cxx BAT-1.0.0_OMPI/src/BCLog.cxx
--- BAT-1.0.0/src/BCLog.cxx	2018-05-18 11:21:56.000000000 +0200
+++ BAT-1.0.0_OMPI/src/BCLog.cxx	2019-04-17 04:06:18.000000000 +0200
@@ -62,7 +62,7 @@
     BCLog::SetLogLevelFile(loglevelfile);
     BCLog::SetLogLevelScreen(loglevelscreen);
 
-    BCLog::Out(BCLog::summary, BCLog::summary, "Opening logfile " + filename);
+    if (fPrefix) BCLog::Out(BCLog::summary, BCLog::summary, "Opening logfile " + filename);
 }
 
 // ---------------------------------------------------------
